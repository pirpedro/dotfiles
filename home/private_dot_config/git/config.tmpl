[init]
  defaultBranch = master
  templateDir = ~/.git/init_template

[core]
  editor = vim
  excludesfile = ~/.git/gitignore
  ignorecase = false
  pager = delta --features default
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol

[user]
  name = {{ .github.name }}
  email = {{ .github.email }}
  signingkey = {{ .github.signing_key }}

[sendemail]
  smtpencryption = tls
  smtpserver = smtp.gmail.com
  smtpuser = {{ .github.email }}
  smtpserverport = 587

[web]
  browser = {{ .browser }}

[instaweb]
  httpd = apache2 -f

[rerere]
  enabled = 1
  autoupdate = 1

[commit]
  template = ~/.git/commit_message.txt
  gpgsign = true

[tag]
  gpgsign = true

[push]
  default = current

[pretty]
  better-oneline = "format:%C(auto)%h%d %s %Cblue[%cn]"
  summary = "format:%C(yellow)%H%C(red)%d%n%C(blue)%cd %an%n%C(reset)%s%n"

[color]
  ui = true
  branch = auto
  diff = auto
  status = auto

[color "branch"]
  current = yellow bold
  local = green bold
  remote = cyan bold

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  plain = white
  whitespace = red reverse

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = reverse bold red
  newNormal = green bold
  newHighlight = reverse bold green

[color "status"]
  added = green bold
  changed = yellow bold
  untracked = red bold

[filter "tabspace"]
  smudge = unexpand --tabs=2 --first-only
  clean = expand --tabs=2 --initial

[merge]
  keepBackup = false
  tool = p4merge

[mergetool]
  prompt = false

[mergetool "p4merge"]
  cmd = p4merge "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
  keepTemporaries = false
  trustExitCode = false
  keepBackup = false

[diff]
  renameLimit = 5000
  tool = fugitive
  compactionHeuristic = 1
  colorMoved = default

[difftool "fugitive"]
  cmd = vim -c \"execute 'Gstatus' | wincmd p | Gvdiff ~1\" $MERGED

[difftool "p4merge"]
  cmd = p4merge "$LOCAL" "$REMOTE"
  keepTemporaries = false
  trustExitCode = false
  keepBackup = false

  [bash]
  showDirtyState = true

[interactive]
  diffFilter = delta --features default --color-only

[delta "default"]
  navigate = true
  side-by-side = true
  features = nord-theme

[delta "nord-theme"]
  line-numbers-zero-style = blue
  line-numbers-minus-style = white red
  line-numbers-plus-style = black green
  minus-style = white red
  minus-emph-style = red white 
  plus-style = black green
  plus-emph-style = black white
  syntax-theme = Nord

[delta "fzf"]
  line-numbers = true
  features = nord-theme

[alias]
  a = add
  aa = add --all
  ai = add -i
  #############
  ap = apply
  as = apply --stat
  ac = apply --check
  #############
  ama = am --abort
  amr = am --resolved
  ams = am --skip
  #############
  b = branch
  ba = branch -a
  bd = branch -d
  br = branch -r
  ##############
  co = checkout
  cob = checkout -b
  com = checkout master
  cod = checkout develop
  ##############
  c = commit
  ca = commit -a
  cm = commit -m
  cem = commit --alow-empty -m
  cam = commit -am
  cd = commit --amend
  cad = commit -a --amend
  ced = commit --allow-empty --amend
  cs = commit -S
  csm = commit -S -m
  #############
  d = diff
  dc = diff --cached
  dl = difftool
  dlc = diftool --cached
  dk = diff --check
  dp = diff --patience
  dck = diff --cached --check
  #############
  f = fetch --all
  fo = fetch origin
  fu = fetch upstream
  #############
  fp = format-patch
  #############
  fk = fsck
  #############
  g = grep -p
  #############
  l = log --oneline
  lg = log --oneline --graph --decorate
  #############
  ls = ls-files
  lsf = "!git ls-files | grep -i"
  #############
  m = merge
  ma = merge --abort
  mc = merge --continue
  ms = merge --skip
  #############
  pr = prune -v
  #############
  ps = push
  psf = push -f
  psu = push -u
  pso = push origin
  psao = push --all origin
  psfo = push -f origin
  psuo = push -u origin
  psom = push origin master
  psfom = push -f origin master
  psuom = push -u origin master
  #############
  pl = pull
  plu = pull -u
  plo = pull origin
  plp = pull upstream
  plom = pull origin master
  plpm = pull upstream master
  #############
  pb = pull --rebase
  pbo = pull --rebase origin
  pbp = pull --rebase upstream
  pbom = pull --rebase origin master
  pbpm = pull --rebase upstream master
  #############
  rb = rebase
  rba = rebase --abort
  rbc = rebase --continue
  rbi = rebase --interactive
  rbs = rebase --skip
  #############
  re = reset
  rh = reset HEAD
  reh = reset --hard
  rem = reset --mixed
  res = reset --soft
  rehh = reset --hard HEAD
  remh = reset --mixed HEAD
  resh = reset --soft HEAD
  #############
  r = remote
  ra = remote add
  rr = remote rm
  rv = remote -v
  rm = remote rename
  rp = remote prune
  rs = remote show
  rao = remote add origin
  rau = remote add upstream
  rso = remote show origin
  rsu = remote show upstream
  rpo = remote prune origin
  rpu = remote prune upstream
  #############
  s = status
  sb = status -s -b
  #############
  sa = stash apply
  sc = stash clear
  sd = stash drop
  sl = stash list
  sp = stash pop
  ss = stash save
  sw = stash show
  #############
  w = show
  wp = show -p
  wr = show -p --no-color
  #############
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  #############
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  unassumeall = !git assumed | xargs git update-index --no-assume-unchanged
  assumeall = "!git st -s | awk {'print $2'} | xargs git assume"
  #############
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
  #############
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  #############
  barebranch = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
  flat = clone --depth 1
  subpull = !git submodule foreach git pull --tags origin master
  subrepo = !sh -c 'filter-branch --prune-empty --subdirectory-filter $1 master' -
  human = name-rev --name-only --refs=refs/heads/*
  serve = !git daemon --reuseaddr --verbose  --base-path=. --export-all ./.git
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  ec = config --global -e
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive
  # initial empty commit
  empty = "!f() { git commit -m \"${1-[empty] Initial commit}\" --allow-empty; }; f"
  save = !git add -A && git commit -m 'CHECKPOINT'
  wip = !git add -u && git commit -m 'WIP'
  # undo from here http://megakemp.com/2016/08/25/git-undo/
  undo = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"
  amend = commit -a --amend
  wipe = !git add -A && git commit -qm 'WIPE CHECKPOINT' && git undo
  bclean = "!f() { git branch --merged ${1-`git devbranch`} | grep -v \" ${1-`git devbranch`}$\" | xargs git branch -d; }; f"
  bdone = "!f() { git checkout ${1-master} && git bclean ${1-master}; }; f"

  #logs
  ls = log --graph --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
  filelog = log -u
  # list aliases
  la = "!git config -l | grep alias | cut -c 7-"
  find = "!git ls-files | grep -i"

  root = stats --root-path
  #current branch
  curbranch = stats --long-current-branch
  #remove tag
  deletetag = "f() { git tag -d $1; git push origin :refs/tags/$1; }; f"

{{ if and .is.personal (not .is.ephemeral) (not .is.headless) -}}
{{   $yaml := fromYaml (output "chezmoi" "execute-template" (include ".chezmoigit.yaml" | trim ) ) -}}
[bulkworkspaces]
{{  range (keys $yaml.workspaces | sortAlpha) -}}
{{    $ws:= get $yaml.workspaces . -}}
{{    $root:=ternary $ws.root "" (ne $ws.root nil) -}}
{{ printf "  %s = %s/%s" . $.chezmoi.homeDir $root}} 
{{  end -}}
{{ end -}}
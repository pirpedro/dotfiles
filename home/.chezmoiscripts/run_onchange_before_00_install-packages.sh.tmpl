{{ $yaml := fromYaml (output "chezmoi" "execute-template" (include ".chezmoipackages.yaml" | trim ) ) -}}
{{- /* Create an list with the crrent machine state: ephemeral, headless, personal etc... */ -}}
{{ $state:=list -}}
{{ range keys .is -}}
{{   if dig . false $.is -}}
{{     $state = mustAppend $state . -}}
{{   end -}}
{{ end -}}
{{ $install := list -}}
{{  range $yaml.packages -}}
{{    $pkg_name:="" -}}
{{    $pkg_alias:="" -}}
{{    $pkg_installer:="os" -}}
{{    $pkg_not:= list -}}
{{    $pkg_de:= list $.env.de -}}{{- /* Force package defaut desktop enviroment to be the system one */ -}}
{{    if eq (printf "%T" .) "string" -}}
{{      $pkg_name = . -}}
{{      $pkg_alias = . -}}
{{    else -}}
{{      $pkg_name = index (keys .) 0 -}}
{{      $pkg_alias = dig $pkg_name "alias" $pkg_name . -}}
{{      $pkg_not = splitList ":" (dig $pkg_name "not" "" .) -}}
{{      $pkg_de = splitList ":" (dig $pkg_name "de" $.env.de .) -}}
{{      $pkg_installer = dig $pkg_name "installer" $pkg_installer . -}}
{{    end -}}
{{    if has $.env.de $pkg_de -}}
{{- /* dumb away to check intersectino between two lists */ -}}
{{      if eq (addf (len $pkg_not) (len $state) | int) (concat $pkg_not $state | uniq | len ) -}}
{{        $install = mustAppend $install (printf "%s:%s:%s" $pkg_name $pkg_alias $pkg_installer ) -}}
{{      end -}}
{{    end -}}
{{  end -}}

{{ if and (ne .chezmoi.username "root") (not .is.ephemeral) -}}
    {{ $install = mustAppend $install "sudo:sudo:os" -}}
{{ end -}}

{{ $packages := dict -}}{{ $scripts := list -}}
{{ $name := "" -}}{{ $cmd := "" -}}{{ $installer := "" -}}
{{ range $install -}}
{{   $i := split ":" . -}}
{{   $name = $i._0 -}}
{{   $cmd = $i._1 -}}
{{   $installer = $i._2 -}}
{{   if not (lookPath $cmd) -}}
{{     if stat (printf "%s/.chezmoitemplates/packages/%s.sh" $.chezmoi.sourceDir $name) -}}
{{       $scripts = mustAppend $scripts $name -}}
{{     else -}}
{{       if not (hasKey $packages $installer) -}}
{{          $_:= set $packages $installer list -}}
{{       end -}}
{{       $list := get $packages $installer -}}
{{       $_:= set $packages $installer (mustAppend $list $name) -}}       
{{     end -}}
{{   end -}}
{{ end -}}


{{ if eq .chezmoi.os "darwin" "linux" -}}
#!/usr/bin/env bash
# .chezmoipackages.yaml hash {{ include ".chezmoipackages.yaml" | sha256sum }}
{{   if eq .chezmoi.os "darwin" -}}
xcode-select --install
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
{{ .cmd.os.install }} bash-completion@2
{{    end -}}

{{   if eq .osidlike "debian" -}}
export DEBIAN_FRONTEND=noninteractive
{{   end -}}
set -eufo pipefail
echo "Bootstrapping system..."
{{ .cmd.os.update }}
{{   if $packages.os -}} 
{{ .cmd.os.install }} {{ $packages.os | join " " }}
{{   $_ := unset $packages "os" -}}
{{   end -}}
{{ .cmd.sudo }} chsh -s $(which zsh) $(whoami)

{{-   range $scripts }}
echo "Installing {{ . }}...";
{{- /* Workaroud to handle the problem related to template function only accepting static string as arguments*/ -}}
{{- /* So invoking the chezmoi command allows to pass a dynamic location to be parsed */ -}}
{{ output "chezmoi" "execute-template" (include (printf ".chezmoitemplates/packages/%s.sh" . )) }}
echo "{{ . }} installed.";
{{-   end }}
{{ end -}}

{{  range $k, $v := $packages -}} 
{{ dig  $k "install" "" $.cmd }} {{ $v | join " " }}
{{   end -}}


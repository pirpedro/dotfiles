"""
""" Vim/NeoVim configuration
""" Pedro Rodrigues <pir.pedro@gmail.com>
"""

set nocompatible              " be iMproved, required
filetype off                  " required

let &t_ut=''

set modelines=0
set autoindent tabstop=2 shiftwidth=2 softtabstop=2 expandtab
set encoding=UTF-8
set scrolloff=3
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set number
set relativenumber
set noundofile
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
set wrap
set linebreak
set nolist
set formatoptions=qrn1
set updatetime=250

call plug#begin('~/.vim/plugged')

" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'

" Template scheme for vim.
Plug 'dracula/vim', { 'as': 'dracula' }

"The NERD tree allows you to explore your filesystem and to open files and directories.
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

"A plugin of NERDTree showing git status flags.
Plug 'Xuyuanp/nerdtree-git-plugin'

" Add file icons. It requires an installation of a Nerd Font (https://github.com/ryanoasis/nerd-fonts).
" After installing the font, exit terminal and re-run.
Plug 'ryanoasis/vim-devicons'

" Add color to devicons.
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" TODO: this plugin is overriding executable files color

"Syntastic is a syntax checking plugin for Vim that runs files through external syntax checkers and displays any resulting errors to the user
Plug 'scrooloose/syntastic'

"Git wrapper for vim
Plug 'tpope/vim-fugitive'

"provides mappings to easily delete, change and add such surroundings in pairs.
Plug 'tpope/vim-surround'

"Repeat.vim remaps . in a way that plugins can tap into it."
Plug 'tpope/vim-repeat'

"Lean & mean status/tabline for vim that's light as air.
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#show_tab_nr = 0

"EasyMotion provides a much simpler way to use some motions in vim.
Plug 'easymotion/vim-easymotion'

"Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
Plug 'ctrlpvim/ctrlp.vim'

"Tagbar is a Vim plugin that provides an easy way to browse the tags of the current file and get an overview of its structure.
Plug 'majutsushi/tagbar'

"Comment functions so powerful—no comment necessary.
Plug 'preservim/nerdcommenter'

"A Vim plugin which shows a git diff in the 'gutter' (sign column).
Plug 'airblade/vim-gitgutter'

"YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine for Vim.
Plug 'valloric/youcompleteme'

Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'pearofducks/ansible-vim'

call plug#end()

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on
set omnifunc=syntaxcomplete#Complete

"""---------------------
"""----- NERDTree ------

"open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | exe 'NERDTree' | endif

" Open NERDTree automatically when vim starts up on opening a directory.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif

" Close vim if the only window left open is a NERDTree.
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

"have my cursor start in the other window
autocmd vimenter * wincmd p

" Hide folder arrows
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

" Remove 'Press ? for help'
let NERDTreeMinimalUI = 1

"""---------------------
"""----- syntastic ------

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"""---------------------
"""----- Dev icons -----

" Change folder icon if it's opened or closed
let g:DevIconsEnableFoldersOpenClose = 1

" Set regular file icon
let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = ''


"""---------------------
"""----- airline -------

"let g:airline_theme='dark'

"""---------------------
"""----- nerdcommenter -

" Add space after comment character(s)
let g:NERDSpaceDelims = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

"""---------------------
"""----- ctrlp ---------

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

let g:ctrlp_custom_ignore = {
	\ 'dir':  '\v[\/](site\-packages|node_modules|__pycache__)|(\.(git|hg|svn))$',
	\ 'file': '\v\.(pyc|exe|so|dll)$',
	\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
	\ }

"""---------------------
"""----- Tagbar ---------

nmap <F8> :TagbarToggle<CR>

"""---------------------
"""---- True Colors ----

if (has("nvim"))
  " For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

" For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
" Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
  set termguicolors
endif

"""---------------------
"""------ Theme --------

syntax enable
"let g:solarized_termcolors=256
"set t_Co=256
set background=dark
if has("gui_running")
    colorscheme dracula
endif
" Change colors on vimdiff
highlight DiffAdd    gui=none guifg=bg guibg=#90D090
highlight DiffDelete gui=none guifg=bg guibg=#EC7C7C
highlight DiffChange gui=none guifg=bg guibg=#6090C0
highlight DiffText   gui=none guifg=bg guibg=#8FBFE7

set guifont=Fira\ Code:h14
"""---------------------
"""---- Highlight ------

set cursorline
highlight CursorLine guibg=#404050
highlight Cursor guibg=#606070

"""---------------------
"""---- Column 80 ------

set colorcolumn=80

"""---------------------
"""----- Commands ------

" Replicates command w for W
command! -bang -range=% -complete=file -nargs=* W <line1>,<line2>write<bang> <args>

" Close current buffer (saving or not, forcing quit or not)
command! -bang Q :call CloseCurrentBuffer(<bang>0, 0)
command! -bang WQ :call CloseCurrentBuffer(<bang>0, 1)

"""---------------------
"""---- Shortcuts ------

" Ctrl + N => Open NERDTree
nmap <C-n> :NERDTreeToggle<CR>
nmap <C-f> :NERDTreeFind<CR>

" Ctrl + => Go to NERDTree TODO


" Ctrl + / => Toggle comment line (visual and normal mode)
nmap <C-_> <plug>NERDCommenterToggle
vmap <C-_> <plug>NERDCommenterToggle


" Switch between different windows by their direction
nnoremap <silent> <A-Down> <C-w>j| "switching to below window
nnoremap <silent> <A-Up> <C-w>k| "switching to above window
nnoremap <silent> <A-Right> <C-w>l| "switching to right window
nnoremap <silent> <A-Left> <C-w>h| "switching to left window

" Switch between different buffers by their direction
nnoremap <silent> <C-Right> :call NextBuf()<CR>
nnoremap <silent> <C-Left> :call PrevBuf()<CR>

" Map Ctrl + P to search for files in current directory,
" where current directory is NERDTree Root (if available) or cwd
let g:ctrlp_map = 0
nmap <C-p> :CtrlP GetCwd()<CR>

" Exchange line position with Alt+k (line up) or Alt+j (line down)
nmap <A-k> ddkP
nmap <A-j> ddp

" Map to copy to clipboard
vmap <C-c> "+y
vmap <C-v> "+p

inoremap jk <ESC>
let mapleader = ","

" Arrows are unvimlike 

nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

vnoremap . :norm.<CR>

nnoremap / /\v
vnoremap / /\v

"nnoremap <leader><space> :noh<cr>
"nnoremap <tab> %
"vnoremap <tab> %


"""---------------------
"""---- Automation -----

" Remove all trailing spaces on save
autocmd BufWritePre * %s/\s\+$//e

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
            \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

" Autorefresh NERDTree
" TODO: TOO SLOW
" autocmd CursorHold,CursorHoldI * if (exists("g:NERDTree")) | exe 'NERDTreeRefreshRoot' | endif
"""---------------------
function! GetCwd()
  if exists('g:NERDTree')
    return g:NERDTree.ForCurrentTab().getRoot().path.str()
  else
    return getcwd()
  endif
endfunction


function! PrintError(msg, prompt)
  echohl ErrorMsg | echo a:msg | echohl None
  if a:prompt
    echohl Question | echo "" | echohl None
  endif
endfunction

function! CloseCurrentBuffer(force, save)
  let curbuf = bufnr("%")
  let lastbuf = bufnr("$")
  let mvbuf = curbuf == lastbuf ? "bp" : "bn"
  if &mod
    if a:save
      if (&readonly && !a:force)
        call PrintError("'readonly' option is set (add ! to override)", 0)
      else
        exe 'w!' | exe mvbuf | exe 'bd! '.curbuf
      endif
    elseif a:force
      exe mvbuf | exe 'bd! '.curbuf
    else
      let curbufname = bufname("%")
      call PrintError("No write since last change for buffer \"".curbufname."\"", 1)
    endif
  else
    exe mvbuf | exe 'bd '.curbuf
  endif
endfunction

function! NextBuf()
  if IsCurrentBufferNERDTree()
    exe "normal \<C-W>\<C-w>"
  else
    exe 'bn'
  endif
endfunction

function! PrevBuf()
  if IsCurrentBufferNERDTree()
    exe "normal \<C-W>\<C-w>"
  else
    exe 'bp'
  endif
endfunction

function! IsCurrentBufferNERDTree()
  let nerdtree_regex = g:NERDTreeCreator.BufNamePrefix().'*'
  let current_buffer_name = bufname('%')
  return current_buffer_name =~ nerdtree_regex
endfunction

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX
